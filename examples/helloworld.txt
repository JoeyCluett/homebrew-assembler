
#
# dot-keywords:
#
# .byte   - specifies that the operation should be done on the LSB of the operand registers
# .ZCFO   - flag specifiers. each letter refers to flag bit. each is optional. empty flags means unconditioal jump
# .export - places given label in the global namespace
#


#
# family-0 ALU operations:
#
# 16-bit instructions
#
# add, adc, sub, sbb, or, and, xor, not, inc, dec, lsh, rsh, sign_ext, zero_ext
#
# aliases:
#    zero rN == xor rN, rN
#

    nop       # alias for 'mov r0, r0'
    zero r5   # expands to 'xor r5, r5', also use 'zero .byte r5'

    add r0,  r12   # r0  = r0  + r12
    adc r5,  r0    # r5  = r5  + r0 + CF
    sub r9,  r8    # r9  = r9  - r8
    sbb r15, r0    # r15 = r15 - r0 - CF
    or  r13, r15   # r13 = r13 | r15
    and r4,  r5    # r4  = r4  & r5
    xor r8,  r8    # r8  = r8 ^ r8      # alias is 'zero r8'
    not r0,  r3    # r0  = ~r3
    inc r10, r11   # r10 = r11 + 1
    dec r8,  r3    # r8  = r3  - 1
    lsh r9,  r13   # r9  = r13 << 1
    rsh r13, r0    # r13 = r0  >> 1


    sign_ext r2, r1  # sign extend r1.LSB into r2
    sx r2, r1        # sign extend r1.LSB into r2 (alias of sign_ext)
    se r2, r1        # sign extend r1.LSB into r2 (alias of sign_ext)
    zero_ext r8, r2  # zero extend r2.LSB into r8
    zx r8, r2        # zero extend r2.LSB into r8 (alias of zero_ext)
    ze r8, r2        # zero extend r2.LSB into r8 (alias of zero_ext)

# similar to above instructions but performed on the LSB of each register
    add .byte r0,  r12     # r0  = r0  + r12
    adc .byte r5,  r0      # r5  = r5  + r0 + CF
    sub .byte r9,  r8      # r9  = r9  - r8
    sbb .byte r15, r0      # r15 = r15 - r0 - CF
    or  .byte r13, r15     # r13 = r13 | r15
    and .byte r4,  r5      # r4  = r4  & r5
    xor .byte r8,  r8      # r8  = r8 ^ r8      # alias is 'zero r8'
    not .byte r0,  r3      # r0  = ~r3
    inc .byte r10, r11     # r10 = r11 + 1
    dec .byte r8,  r3      # r8  = r3  - 1
    lsh .byte r9,  r13     # r9  = r13 << 1
    rsh .byte r13, r0      # r13 = r0  >> 1

# instructions with "(.byte) reg, reg" argument types
adc
or
and
xor
not
inc
dec
lsh
rsh

@file_end


#
# flags:
#     Carry out (C)
#     Zero      (Z)
#     oVerflow  (V)
#     Equals    (E)
#

    jmp .ZC @file_end                  random  # jump to @file_end if Zero or Carry flag is asserted
